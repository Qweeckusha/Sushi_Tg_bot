import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import sys
sys.setrecursionlimit(50000)
from functools import *

# –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('store.sql')
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–±—â–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
cursor.execute('''CREATE TABLE IF NOT EXISTS sequence (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    current_value INTEGER
)''')

# –í—Å—Ç–∞–≤—å—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
cursor.execute('INSERT INTO sequence (current_value) VALUES (1)')

# –¢–∞–±–ª–∏—Ü–∞ —Å —Å—É—à–∏
cursor.execute('''CREATE TABLE IF NOT EXISTS sushi (
    product_id INTEGER,
    img BLOB,
    name TEXT,
    price INTEGER,
    FOREIGN KEY (product_id) REFERENCES sequence(id)
)''')
# –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏
cursor.execute('''CREATE TABLE IF NOT EXISTS drinks (
    product_id INTEGER,
    img BLOB,
    name TEXT,
    price INTEGER,
    FOREIGN KEY (product_id) REFERENCES sequence(id)
)''')

# –¢–∞–±–ª–∏—Ü–∞ —Å —Å–æ—É—Å–∞–º–∏
cursor.execute('''CREATE TABLE IF NOT EXISTS sous (
    product_id INTEGER,
    img BLOB,
    name TEXT,
    price INTEGER,
    FOREIGN KEY (product_id) REFERENCES sequence(id)
)''')

# –û–±—â–∞—è –±–∞–∑–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
cursor.execute('''CREATE TABLE IF NOT EXISTS products
                      (product_id INTEGER,
                       img BLOB,
                       name TEXT,
                       price INTEGER)''')

# –¢–∞–±–ª–∏—Ü—É –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''CREATE TABLE IF NOT EXISTS carts
                  (user_id TEXT,
                   product_id TEXT,
                   quantity INTEGER)''')

conn.commit()
conn.close()


class SushiProductForm(StatesGroup):
    name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    img = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    price = State()   # –û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞

class DrinksProductForm(StatesGroup):
    name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    img = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    price = State()   # –û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞

class SousProductForm(StatesGroup):
    name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    img = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    price = State()   # –û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞

class UserOrder(StatesGroup):
    name = State()
    phone = State()
    description = State()
    location = State()

API_TOKEN = '6546644497:AAFPX6SIrAX4P89go3MzU_bik2YeTXf_A5A'
PAYMENT_TOKEN = '1744374395:TEST:f1e902e3d3060fb269c9'
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)
log = LoggingMiddleware()

class Product:
    def __init__(self, id, img, name, price):
        self.img = img
        self.id = id
        self.name = name
        self.price = price




markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = types.KeyboardButton('–ö–æ—Ä–∑–∏–Ω–∞ üõíüç£üõí')
btn2 = types.KeyboardButton('–ö–∞—Ç–∞–ª–æ–≥ üç£ü•§ü•£')
btn3 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
btn4 = types.KeyboardButton('–û–ø–µ—Ä–∞—Ç–æ—Ä ‚òé')
btn5 = types.KeyboardButton('–ò–Ω—Ñ–æ ‚ÑπÔ∏è')
markup.add(btn2).row(btn1,btn3).row(btn4, btn5)
@lru_cache(None)
@dp.message_handler(commands=['start'])
async def on_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)
    await message.delete()

async def on_start_rewind(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

async def list_of_products(message: types.Message):
    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–°—É—à–∏-–†–æ–ª–ª—ã üç£')
    btn2 = types.KeyboardButton('–ù–∞–ø–∏—Ç–∫–∏ ü•§')
    btn3 = types.KeyboardButton('–°–æ—É—Å—ã ü•£')
    btn4 = types.KeyboardButton('–ù–∞–∑–∞–¥ üîô')
    markup2.row(btn1, btn2)
    markup2.row(btn3, btn4)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', reply_markup=markup2)

async def developer(message: types.Message):
    markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–°—É—à–∏-–†–æ–ª–ª—ã add')
    btn2 = types.KeyboardButton('–ù–∞–ø–∏—Ç–∫–∏ add')
    btn3 = types.KeyboardButton('–°–æ—É—Å—ã add')
    btn4 = types.KeyboardButton('–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞')
    btn5 = types.KeyboardButton('–ù–∞–∑–∞–¥ üîô ')

    markup3.row(btn1, btn2, btn3).add(btn4,btn5)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.', reply_markup=markup3)

async def settings(message: types.Message):
    markup4 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üë®‚Äçüíª')
    btn2 = types.KeyboardButton('–ù–∞–∑–∞–¥ üîô')
    markup4.row(btn1, btn2)
    await message.answer('–í—ã —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é.', reply_markup=markup4)

@dp.callback_query_handler(text='order')
async def order(call: types.CallbackQuery):

    user_id = call.message.chat.id
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ—Ä–∑–∏–Ω—ã –≤ –ë–î
    cursor.execute('''
            SELECT products.name, products.price, carts.quantity
            FROM carts
            JOIN products ON carts.product_id = products.product_id
            WHERE carts.user_id = ?''', (user_id,))
    cart_items = cursor.fetchall()
    print(f'cart_items for order: {cart_items}')
    conn.commit()
    conn.close()

    if cart_items:
        total_price = 0
        text_desc = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:\n"
        await call.message.answer('–ö–æ—Ä–∑–∏–Ω–∞: ')
        for item in cart_items:
            print(f'Item for order: {item}')
            product_name, product_price, quantity = item
            total_price += product_price * quantity
            text_desc += f'{product_name} - {product_price} –∫–æ–ª-–≤–æ: {quantity}\n'
        await bot.send_invoice(call.message.chat.id, f'–ó–∞–∫–∞–∑ {user_id}', f'{text_desc}', 'invoice',
                               PAYMENT_TOKEN, 'RUB', [types.LabeledPrice('ORDER', total_price * 100)])

    else:
        await call.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

@dp.message_handler(content_types=types.ContentTypes.SUCCESSFUL_PAYMENT)
async def payment(msg: types.Message):
    await msg.answer(f'–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ.\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {msg.successful_payment.order_info}\n'
                     f'–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:{msg.successful_payment.shipping_option_id}')
    await bot.send_message('907894764','1')


@dp.message_handler()
async def buttons(message: types.Message):
    if message.text == '–ö–æ—Ä–∑–∏–Ω–∞ üõíüç£üõí':
        await show_cart(message)
    if message.text == '–ö–∞—Ç–∞–ª–æ–≥ üç£ü•§ü•£':
        await list_of_products(message)
    if message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        await settings(message)
    if message.text == '–°—É—à–∏-–†–æ–ª–ª—ã üç£':
        await show_sushi(message)
    if message.text == '–ù–∞–ø–∏—Ç–∫–∏ ü•§':
        await show_drinks(message)
    if message.text == '–°–æ—É—Å—ã ü•£':
        await show_sous(message)
    if message.text == '–ù–∞–∑–∞–¥ üîô ':
        await on_start_rewind(message)
    if message.text == '–ù–∞–∑–∞–¥ üîô':
        await on_start_rewind(message)
    if message.text == '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üë®‚Äçüíª':
        await developer(message)
    if message.text == '–°—É—à–∏-–†–æ–ª–ª—ã add':
        await add_product_sushi(message)
    if message.text == '–ù–∞–ø–∏—Ç–∫–∏ add':
        await add_product_drinks(message)
    if message.text == '–°–æ—É—Å—ã add':
        await add_product_sous(message)
    if message.text == '–û–ø–µ—Ä–∞—Ç–æ—Ä ‚òé':
        await message.answer(text='@Antyoi\n@moliarka')
    if message.text == '–ò–Ω—Ñ–æ ‚ÑπÔ∏è':
        await bot.send_location(message.from_user.id, '35.6854238', '139.7751616')
        await message.answer('–ù–ï –ü–û–ö–£–ü–ê–ô–¢–ï –ó–î–ï–°–¨, –≠–¢–û –ü–†–û–°–¢–û –ü–†–ò–ú–ï–†!')
    if message.text == '–û–ø–ª–∞—Ç–∏—Ç—å üí∞':
        await register_user_order(message)
    if message.text == '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞':
        await delete_item(message)
    if message.text == '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ sushi':
        await delete_item_sushi(message)
    if message.text == '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ drinks':
        await delete_item_drinks(message)
    if message.text == '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ sous':
        await delete_item_sous(message)


    await message.delete()

@dp.message_handler(commands=['sushi'])
async def show_sushi(message: types.Message):
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute('SELECT product_id, img, name, price FROM sushi')
    prod_sushi = cursor.fetchall()
    conn.close()

    if prod_sushi:
        products_text = "–°–ø–∏—Å–æ–∫ –°—É—à–∏ –∏ –†–æ–ª–ª–æ–≤:\n"
        for product in prod_sushi:
            product_obj = Product(*product)
            markup = types.InlineKeyboardMarkup()
            btn1 = markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å', callback_data=f'cartadd:{product_obj.id}'))
            btn2 = markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'cartremove:{product_obj.id}'))
            products_text += f"{product_obj.name} - {product_obj.price} —Ä—É–±.\n–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {product_obj.id}"
            await bot.send_photo(message.chat.id, photo=f'{product_obj.img}', caption=products_text, reply_markup=markup)
            products_text = "–°–ø–∏—Å–æ–∫ –°—É—à–∏ –∏ –†–æ–ª–ª–æ–≤:\n"
    else:
        await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

@dp.message_handler(commands=['drinks'])
async def show_drinks(message: types.Message):
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute('SELECT product_id, img, name, price FROM drinks')
    prod_drinks = cursor.fetchall()
    conn.close()

    if prod_drinks:
        products_text = "–°–ø–∏—Å–æ–∫ –ù–∞–ø–∏—Ç–∫–æ–≤:\n"
        for product in prod_drinks:
            product_obj = Product(*product)
            markup = types.InlineKeyboardMarkup()
            btn1 = markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å', callback_data=f'cartadd:{product_obj.id}'))
            btn2 = markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'cartremove:{product_obj.id}'))
            products_text += f"{product_obj.name} - {product_obj.price} —Ä—É–±.\n–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {product_obj.id}"
            await bot.send_photo(message.chat.id, photo=f'{product_obj.img}', caption=products_text, reply_markup=markup)
            products_text = "–°–ø–∏—Å–æ–∫ –ù–∞–ø–∏—Ç–∫–æ–≤:\n"
    else:
        await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

@dp.message_handler(commands=['sous'])
async def show_sous(message: types.Message):
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute('SELECT product_id, img, name, price FROM sous')
    prod_sous = cursor.fetchall()
    conn.close()

    if prod_sous:
        products_text = "–°–ø–∏—Å–æ–∫ –°–æ—É—Å–æ–≤:\n"
        for product in prod_sous:
            product_obj = Product(*product)
            markup = types.InlineKeyboardMarkup()
            btn1 = markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å', callback_data=f'cartadd:{product_obj.id}'))
            btn2 = markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'cartremove:{product_obj.id}'))
            products_text += f"{product_obj.name} - {product_obj.price} —Ä—É–±.\n–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {product_obj.id}"
            await bot.send_photo(message.chat.id, photo=f'{product_obj.img}', caption=products_text, reply_markup=markup)
            products_text = "–°–ø–∏—Å–æ–∫ –°–æ—É—Å–æ–≤:\n"
    else:
        await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

@dp.callback_query_handler(lambda a: a.data.startswith('cart'))
async def add_to_cart(call: types.CallbackQuery):
    data_list = call.data.split(':')
    operation = data_list[0]
    product_id = data_list[1]
    print(data_list)
    print(product_id)

    if operation == 'cartadd':
        user_id = call.message.chat.id
        conn = sqlite3.connect('store.sql')
        cursor = conn.cursor()

        # –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞

        cursor.execute('SELECT img, name FROM products WHERE product_id = ?', (product_id,))
        product = cursor.fetchone()
        print(f"Product: {product}")
        product_img, product_name = product

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cursor.execute('SELECT quantity FROM carts WHERE user_id = ? AND product_id = ?', (user_id, product_id))
        existing_quantity = cursor.fetchone()

        if existing_quantity:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
            new_quantity = existing_quantity[0] + 1
            cursor.execute('UPDATE carts SET quantity = ? WHERE user_id = ? AND product_id = ?',
                           (new_quantity, user_id, product_id))
        else:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1
            cursor.execute('INSERT INTO carts (user_id, product_id, quantity) VALUES (?, ?, 1)', (user_id, product_id))

        conn.commit()
        conn.close()

        print(f"User ID: {user_id}, Product ID: {product_id}")
        await call.message.answer(f"–¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")

    if operation == 'cartremove':
        user_id = call.message.chat.id
        conn = sqlite3.connect('store.sql')
        cursor = conn.cursor()
        cursor.execute('SELECT quantity FROM carts WHERE user_id = ? AND product_id = ?', (user_id, product_id))
        existing_quantity = cursor.fetchone()

        # –ò–∑–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —É–º–µ–Ω—å—à–∞—è –Ω–∞ 1.
        if existing_quantity[0] > 1:
            new_quantity = existing_quantity[0] - 1
            cursor.execute('UPDATE carts SET quantity = ? WHERE user_id = ? AND product_id = ?',
                           (new_quantity, user_id, product_id))
            conn.commit()
            await call.message.answer('–í—ã —É–¥–∞–ª–∏–ª–∏ 1 —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
        else:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
            cursor.execute('DELETE FROM carts WHERE user_id = ? AND product_id = ?', (user_id, product_id))
            conn.commit()
            conn.close()
            await call.message.answer('–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é.')


@dp.message_handler(commands=['mycart'])
async def show_cart(message: types.Message):

    user_id = message.from_user.id
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ—Ä–∑–∏–Ω—ã –≤ –ë–î
    cursor.execute('''
        SELECT products.img, products.product_id, products.name, products.price, carts.quantity
        FROM carts
        JOIN products ON carts.product_id = products.product_id
        WHERE carts.user_id = ?''', (user_id,))
    cart_items = cursor.fetchall()
    print(f'cart_items: {cart_items}')
    conn.commit()
    conn.close()
    markup_cart = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_oplata = types.KeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å üí∞')
    btn_nazad = types.KeyboardButton('–ù–∞–∑–∞–¥ üîô')
    markup_cart.row(btn_oplata, btn_nazad)

    if cart_items:
        total_price = 0
        cart_text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:\n"
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞: ')
        for item in cart_items:
            print(f'Item: {item}')
            product_img, product_id, product_name, product_price, quantity = item
            total_price += product_price * quantity
            # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ü–∏–∫–ª–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫—É, –ø—Ä–∏ —ç—Ç–æ–º —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å,
            #  —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è—é—Ç—Å—è –≤ cart_handler –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è—é—Ç—Å—è. –ï—Å–ª–∏ —Å–º–æ–∂–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, —Ç–æ –¢–û–ü!
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(f'+', callback_data=f'1cartadd:{product_id}'),
                 InlineKeyboardButton(f'–ö–æ–ª-–≤–æ: {quantity}', callback_data='ignore'),
                 InlineKeyboardButton(f'-', callback_data=f'1cartremove:{product_id}')],
                [InlineKeyboardButton(f'–ò—Ç–æ–≥–æ: {total_price} üí≥', callback_data=f'ignore')]
            ])
            await bot.send_photo(message.chat.id, photo=f'{product_img}', caption=f'{product_name} - {product_price} —Ä—É–±.', reply_markup=keyboard)

        await message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É.", reply_markup=markup_cart)

    elif not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(lambda y: y.data.startswith('1cart'))
async def cart_handler(call: types.CallbackQuery):
    user_id = call.message.chat.id
    data_list = call.data.split(':')
    print(data_list)
    operation = data_list[0]
    product_id = data_list[1]

    # ------------
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute('SELECT quantity FROM carts WHERE user_id = ? AND product_id = ?', (user_id, product_id))
    current_quantity = cursor.fetchone()[0]
    print(f'cur_quantity: {current_quantity}')



    if operation == '1cartadd':
        new_quantity = current_quantity + 1
        cursor.execute('UPDATE carts SET quantity = ? WHERE user_id = ? AND product_id = ?',
                       (new_quantity, user_id, product_id))
        conn.commit()
        cursor.execute('''
                    SELECT name, price FROM products WHERE product_id = ?''', (product_id,))
        product_info_add = cursor.fetchone()
        product_name_add, product_price_add = product_info_add
        print(f'Product_info: {product_info_add}')
        # ------------
        # –í—Å—ë —Ä–∞–¥–∏ total_price
        # FIXME: –±—ã–ª–æ –±—ã —Å–ª–∞–≤–Ω–æ –∫–∞–∫-—Ç–æ total price —Å–¥–µ–ª–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä, —Ç–æ –µ—Å—Ç—å –Ω–∞–¥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∫-—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        cursor.execute('''
                    SELECT products.price, carts.quantity
                    FROM carts
                    JOIN products ON carts.product_id = products.product_id
                    WHERE carts.user_id = ?''', (user_id,))
        cart_items = cursor.fetchall()
        if cart_items:
            total_price = 0
            for item in cart_items:
                product_price, quantity = item
                total_price += product_price * quantity
        # -------------

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(f'+', callback_data=f'1cartadd:{product_id}'),
             InlineKeyboardButton(f'–ö–æ–ª-–≤–æ: {new_quantity}', callback_data=f'1cartadd:{product_id}'),
             InlineKeyboardButton(f'-', callback_data=f'1cartremove:{product_id}')],
            [InlineKeyboardButton(f'–ò—Ç–æ–≥–æ: {total_price} üí≥', callback_data=f'ignore')]
        ])

        await call.message.edit_caption(f'{product_name_add} - {product_price_add} —Ä—É–±.', reply_markup=keyboard)


    if operation == '1cartremove' and current_quantity > 1:
        new_quantity = current_quantity - 1
        cursor.execute('UPDATE carts SET quantity = ? WHERE user_id = ? AND product_id = ?',
                       (new_quantity, user_id, product_id))
        conn.commit()
        cursor.execute('''
                    SELECT name, price FROM products WHERE product_id = ?''', (product_id,))
        product_info_remove = cursor.fetchone()
        product_name_remove, product_price_remove = product_info_remove
        print(f'Product_info: {product_info_remove}')

        # ------------
        # –í—Å—ë —Ä–∞–¥–∏ total_price
        # FIXME: –±—ã–ª–æ –±—ã —Å–ª–∞–≤–Ω–æ –∫–∞–∫-—Ç–æ total price —Å–¥–µ–ª–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä, —Ç–æ –µ—Å—Ç—å –Ω–∞–¥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∫-—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        cursor.execute('''
                    SELECT products.price, carts.quantity
                    FROM carts
                    JOIN products ON carts.product_id = products.product_id
                    WHERE carts.user_id = ?''', (user_id,))
        cart_items = cursor.fetchall()
        if cart_items:
            total_price = 0
            for item in cart_items:
                product_price, quantity = item
                total_price += product_price * quantity
        # -------------

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(f'+', callback_data=f'1cartadd:{product_id}'),
             InlineKeyboardButton(f'–ö–æ–ª-–≤–æ: {new_quantity}', callback_data=f'ingore'),
             InlineKeyboardButton(f'-', callback_data=f'1cartremove:{product_id}')],
            [InlineKeyboardButton(f'–ò—Ç–æ–≥–æ: {total_price} üí≥', callback_data=f'ingore')]
        ])

        await call.message.edit_caption(f'{product_name_remove} - {product_price_remove} —Ä—É–±.', reply_markup=keyboard)


    if operation == '1cartremove' and current_quantity == 1:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
        cursor.execute('DELETE FROM carts WHERE user_id = ? AND product_id = ?', (user_id, product_id))
        conn.commit()
        conn.close()
        await call.message.delete()
        await call.message.answer('–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')


    # # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    # await show_cart(call.message)

    # # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    # cursor.execute('DELETE FROM carts WHERE user_id = ?', (user_id,))
    # conn.commit()
    # conn.close()
    # await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")


async def register_user_order(message: types.Message):
    await message.answer('–û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑:')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.')
    await UserOrder.name.set()

@dp.message_handler(state=UserOrder.name)
async def order_name(message: types.Message, state: FSMContext):
    async with state.proxy() as dataOrder:
        dataOrder['name'] = message.text

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º –≤–∞–º —Ñ–æ—Ä–º–∞—Ç–µ (–ù–∞–ø—Ä–∏–º–µ—Ä: +7 (9xx) xxx xx-xx)')

    await UserOrder.phone.set()

@dp.message_handler(state=UserOrder.phone)
async def order_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as dataOrder:
        dataOrder['phone'] = message.text

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç".')

    await UserOrder.description.set()

@dp.message_handler(state=UserOrder.description)
async def order_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as dataOrder:
        dataOrder['desc'] = message.text

    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å. (–ü—Ä–∏–º–µ—Ä: –ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –∫–æ—Ä–ø—É—Å, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞)')

    await UserOrder.location.set()

@dp.message_handler(state=UserOrder.location)
async def order_loc(message: types.Message, state: FSMContext):
    async with state.proxy() as dataOrder:
        dataOrder['loc'] = message.text

    await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫ –∑–∞–∫–∞–∑—É.', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='order')]
    ]))
    await state.finish()



    # await bot.send_invoice(call.message.chat.id, f'–ó–∞–∫–∞–∑ {user_id}', f'{text_desc}', 'invoice',
    #                        config.PAYMENT_TOKEN, 'RUB', [types.LabeledPrice('ORDER', total_price * 100)])














# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞

async def delete_item(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ sushi')
    btn2 = types.KeyboardButton('–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ drinks')
    btn3 = types.KeyboardButton('–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ sous')
    btn4 = types.KeyboardButton('–ù–∞–∑–∞–¥ üîô')
    markup.row(btn1)
    markup.row(btn2)
    markup.row(btn3)
    markup.row(btn4)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.', reply_markup=markup)
# @dp.message_handler()
# async def buttons(message: types.Message):
#     if message.text == '':
#         await show_cart(message)
#     if message.text == '–ö–∞—Ç–∞–ª–æ–≥ üç£ü•§ü•£':
#         await list_of_products(message)
#     if message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
#         await settings(message)
@dp.message_handler(commands=['deletesushi'])
async def delete_item_sushi(message: types.Message):
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute('SELECT product_id, img, name, price FROM sushi')
    prod_sushi = cursor.fetchall()
    conn.close()

    if prod_sushi:
        products_text = "–°—É—à–∏ –∏ –†–æ–ª–ª—ã:\n"
        for product in prod_sushi:
            product_obj = Product(*product)
            markup = types.InlineKeyboardMarkup()
            btn1 = markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é', callback_data=f'remsushi:{product_obj.id}'))
            products_text += f"{product_obj.name} - {product_obj.price} —Ä—É–±.\n–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {product_obj.id}"
            await bot.send_photo(message.chat.id, photo=f'{product_obj.img}', caption=products_text,
                                 reply_markup=markup)
            products_text = "–°—É—à–∏ –∏ –†–æ–ª–ª—ã:\n"
    else:
        await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

@dp.message_handler(commands=['deletedrink'])
async def delete_item_drinks(message: types.Message):
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute('SELECT product_id, img, name, price FROM drinks')
    prod_drinks = cursor.fetchall()
    conn.close()

    if prod_drinks:
        products_text = "–ù–∞–ø–∏—Ç–∫–∏:\n"
        for product in prod_drinks:
            product_obj = Product(*product)
            markup = types.InlineKeyboardMarkup()
            btn1 = markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é', callback_data=f'remdrinks:{product_obj.id}'))
            products_text += f"{product_obj.name} - {product_obj.price} —Ä—É–±.\n–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {product_obj.id}"
            await bot.send_photo(message.chat.id, photo=f'{product_obj.img}', caption=products_text,
                                 reply_markup=markup)
            products_text = "–ù–∞–ø–∏—Ç–∫–∏:\n"
    else:
        await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

@dp.message_handler(commands=['deletesous'])
async def delete_item_sous(message: types.Message):
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute('SELECT product_id, img, name, price FROM sous')
    prod_sous = cursor.fetchall()
    conn.close()

    if prod_sous:
        products_text = "–°–æ—É—Å—ã:\n"
        for product in prod_sous:
            product_obj = Product(*product)
            markup = types.InlineKeyboardMarkup()
            btn1 = markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é', callback_data=f'remsous:{product_obj.id}'))
            products_text += f"{product_obj.name} - {product_obj.price} —Ä—É–±.\n–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {product_obj.id}"
            await bot.send_photo(message.chat.id, photo=f'{product_obj.img}', caption=products_text,
                                 reply_markup=markup)
            products_text = "–°–æ—É—Å—ã:\n"
    else:
        await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")




# callback –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith('rem'))
async def remove_item(call: types.CallbackQuery):
    data_list = call.data.split(':')
    operation = data_list[0]
    product_id = data_list[1]
    print(operation, product_id)
    if operation == 'remsushi':
        conn = sqlite3.connect('store.sql')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE product_id = ?', (product_id,))
        conn.commit()
        cursor.execute('DELETE FROM sushi WHERE product_id = ?', (product_id,))
        conn.commit()
        conn.close()
        await call.message.answer('–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä')
    if operation == 'remdrinks':
        conn = sqlite3.connect('store.sql')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE product_id = ?', (product_id,))
        conn.commit()
        cursor.execute('DELETE FROM drinks WHERE product_id = ?', (product_id,))
        conn.commit()
        conn.close()
        await call.message.answer('–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä')
    if operation == 'remsous':
        conn = sqlite3.connect('store.sql')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE product_id = ?', (product_id,))
        conn.commit()
        cursor.execute('DELETE FROM sous WHERE product_id = ?', (product_id,))
        conn.commit()
        conn.close()
        await call.message.answer('–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î sushi

@dp.message_handler(commands=['add_sushi'])
async def add_product_sushi(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤–∞–º –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏)
    is_admin = True  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 123 —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –°—É—à–∏ –∏ –†–æ–ª–ª–æ–≤:")
    await SushiProductForm.name.set()


@dp.message_handler(lambda message: '–æ—Ç–º–µ–Ω–∞' in message.text.lower(), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('ok')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=SushiProductForm.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as dataSushi:
        dataSushi['name'] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ü–µ–Ω—ã
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –°—É—à–∏ –∏ –†–æ–ª–ª–æ–≤:")
    await SushiProductForm.next()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(content_types=['photo'], state=SushiProductForm.img)
async def process_img(message: types.Message, state: FSMContext):
    async with state.proxy() as dataSushi:
        dataSushi['img'] = message.photo[-1].file_id

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ü–µ–Ω—ã
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –°—É—à–∏ –∏ –†–æ–ª–ª–æ–≤:")
    await SushiProductForm.next()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
@dp.message_handler(lambda message: not message.text.isdigit(), state=SushiProductForm.price)
async def process_price_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
@dp.message_handler(lambda message: message.text.isdigit(), state=SushiProductForm.price)
async def process_price(message: types.Message, state: FSMContext):
    async with state.proxy() as dataSushi:
        dataSushi['price'] = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    product_dataSushi = dataSushi['img'], dataSushi['name'], dataSushi['price']

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO sushi (product_id, img, name, price) VALUES ((SELECT current_value FROM sequence WHERE id = 1),?, ?, ?)',
        product_dataSushi)
    conn.commit()
    cursor.execute('INSERT INTO products (product_id, img, name, price) VALUES ((SELECT current_value FROM sequence WHERE id = 1),?, ?, ?)',product_dataSushi)
    conn.commit()
    cursor.execute('UPDATE sequence SET current_value = current_value + 1 WHERE id = 1')
    conn.commit()
    conn.close()

    await state.finish()
    await bot.send_photo(message.chat.id, photo=product_dataSushi[0],
                         caption=f"–¢–æ–≤–∞—Ä {product_dataSushi[1]} —Å —Ü–µ–Ω–æ–π {product_dataSushi[2]} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 'sushi'")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î drinks
@dp.message_handler(commands=['add_drinks'])
async def add_product_drinks(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤–∞–º –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏)
    is_admin = True  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 123 —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ù–∞–ø–∏—Ç–∫–æ–≤:")
    await DrinksProductForm.name.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=DrinksProductForm.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as dataDrinks:
        dataDrinks['name'] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ü–µ–Ω—ã
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ù–∞–ø–∏—Ç–∫–æ–≤:")
    await DrinksProductForm.next()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(content_types=['photo'], state=DrinksProductForm.img)
async def process_img(message: types.Message, state: FSMContext):
    async with state.proxy() as dataDrinks:
        dataDrinks['img'] = message.photo[-1].file_id

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ü–µ–Ω—ã
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ù–∞–ø–∏—Ç–∫–æ–≤:")
    await DrinksProductForm.next()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
@dp.message_handler(lambda message: not message.text.isdigit(), state=DrinksProductForm.price)
async def process_price_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
@dp.message_handler(lambda message: message.text.isdigit(), state=DrinksProductForm.price)
async def process_price(message: types.Message, state: FSMContext):
    async with state.proxy() as dataDrinks:
        dataDrinks['price'] = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    product_dataDrinks = dataDrinks['img'], dataDrinks['name'], dataDrinks['price']

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO drinks (product_id, img, name, price) VALUES ((SELECT current_value FROM sequence WHERE id = 1),?, ?, ?)',
        product_dataDrinks)
    conn.commit()
    cursor.execute(
        'INSERT INTO products (product_id, img, name, price) VALUES ((SELECT current_value FROM sequence WHERE id = 1),?, ?, ?)',
        product_dataDrinks)
    conn.commit()
    cursor.execute('UPDATE sequence SET current_value = current_value + 1 WHERE id = 1')
    conn.commit()
    conn.close()

    await state.finish()
    await bot.send_photo(message.chat.id, photo=product_dataDrinks[0],
                         caption=f"–¢–æ–≤–∞—Ä {product_dataDrinks[1]} —Å —Ü–µ–Ω–æ–π {product_dataDrinks[2]} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 'drinks'.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î sous
@dp.message_handler(commands=['add_sous'])
async def add_product_sous(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤–∞–º –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏)
    is_admin = True  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 123 —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ—É—Å–æ–≤:")
    await SousProductForm.name.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=SousProductForm.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as dataSous:
        dataSous['name'] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ü–µ–Ω—ã
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –°–æ—É—Å–æ–≤:")
    await SousProductForm.next()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(content_types=['photo'], state=SousProductForm.img)
async def process_img(message: types.Message, state: FSMContext):
    async with state.proxy() as dataSous:
        dataSous['img'] = message.photo[-1].file_id

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ü–µ–Ω—ã
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –°–æ—É—Å–æ–≤:")
    await SousProductForm.next()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
@dp.message_handler(lambda message: not message.text.isdigit(), state=SousProductForm.price)
async def process_price_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
@dp.message_handler(lambda message: message.text.isdigit(), state=SousProductForm.price)
async def process_price(message: types.Message, state: FSMContext):
    async with state.proxy() as dataSous:
        dataSous['price'] = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    product_dataSous = dataSous['img'], dataSous['name'], dataSous['price']

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('store.sql')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO sous (product_id, img, name, price) VALUES ((SELECT current_value FROM sequence WHERE id = 1),?, ?, ?)',
        product_dataSous)
    conn.commit()
    cursor.execute(
        'INSERT INTO products (product_id, img, name, price) VALUES ((SELECT current_value FROM sequence WHERE id = 1),?, ?, ?)',
        product_dataSous)
    conn.commit()
    cursor.execute('UPDATE sequence SET current_value = current_value + 1 WHERE id = 1')
    conn.commit()
    conn.close()

    await state.finish()
    await bot.send_photo(message.chat.id, photo=product_dataSous[0],
                         caption=f"–¢–æ–≤–∞—Ä {product_dataSous[1]} —Å —Ü–µ–Ω–æ–π {product_dataSous[2]} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 'sous'.")


if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
